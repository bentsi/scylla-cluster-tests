#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def get_methods(self):
    pass

  def clear_all_faults(self):
    pass

  def clear_fault(self, method):
    """
    Parameters:
     - method
    """
    pass

  def set_fault(self, methods, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay):
    """
    Parameters:
     - methods
     - random
     - err_no
     - probability
     - regexp
     - kill_caller
     - delay_us
     - auto_delay
    """
    pass

  def set_all_fault(self, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay):
    """
    Parameters:
     - random
     - err_no
     - probability
     - regexp
     - kill_caller
     - delay_us
     - auto_delay
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def get_methods(self):
    self.send_get_methods()
    return self.recv_get_methods()

  def send_get_methods(self):
    self._oprot.writeMessageBegin('get_methods', TMessageType.CALL, self._seqid)
    args = get_methods_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_get_methods(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = get_methods_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "get_methods failed: unknown result");

  def clear_all_faults(self):
    self.send_clear_all_faults()
    self.recv_clear_all_faults()

  def send_clear_all_faults(self):
    self._oprot.writeMessageBegin('clear_all_faults', TMessageType.CALL, self._seqid)
    args = clear_all_faults_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clear_all_faults(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = clear_all_faults_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def clear_fault(self, method):
    """
    Parameters:
     - method
    """
    self.send_clear_fault(method)
    self.recv_clear_fault()

  def send_clear_fault(self, method):
    self._oprot.writeMessageBegin('clear_fault', TMessageType.CALL, self._seqid)
    args = clear_fault_args()
    args.method = method
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clear_fault(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = clear_fault_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def set_fault(self, methods, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay):
    """
    Parameters:
     - methods
     - random
     - err_no
     - probability
     - regexp
     - kill_caller
     - delay_us
     - auto_delay
    """
    self.send_set_fault(methods, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay)
    self.recv_set_fault()

  def send_set_fault(self, methods, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay):
    self._oprot.writeMessageBegin('set_fault', TMessageType.CALL, self._seqid)
    args = set_fault_args()
    args.methods = methods
    args.random = random
    args.err_no = err_no
    args.probability = probability
    args.regexp = regexp
    args.kill_caller = kill_caller
    args.delay_us = delay_us
    args.auto_delay = auto_delay
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_fault(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_fault_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return

  def set_all_fault(self, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay):
    """
    Parameters:
     - random
     - err_no
     - probability
     - regexp
     - kill_caller
     - delay_us
     - auto_delay
    """
    self.send_set_all_fault(random, err_no, probability, regexp, kill_caller, delay_us, auto_delay)
    self.recv_set_all_fault()

  def send_set_all_fault(self, random, err_no, probability, regexp, kill_caller, delay_us, auto_delay):
    self._oprot.writeMessageBegin('set_all_fault', TMessageType.CALL, self._seqid)
    args = set_all_fault_args()
    args.random = random
    args.err_no = err_no
    args.probability = probability
    args.regexp = regexp
    args.kill_caller = kill_caller
    args.delay_us = delay_us
    args.auto_delay = auto_delay
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_set_all_fault(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = set_all_fault_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["get_methods"] = Processor.process_get_methods
    self._processMap["clear_all_faults"] = Processor.process_clear_all_faults
    self._processMap["clear_fault"] = Processor.process_clear_fault
    self._processMap["set_fault"] = Processor.process_set_fault
    self._processMap["set_all_fault"] = Processor.process_set_all_fault

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_get_methods(self, seqid, iprot, oprot):
    args = get_methods_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = get_methods_result()
    result.success = self._handler.get_methods()
    oprot.writeMessageBegin("get_methods", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clear_all_faults(self, seqid, iprot, oprot):
    args = clear_all_faults_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clear_all_faults_result()
    self._handler.clear_all_faults()
    oprot.writeMessageBegin("clear_all_faults", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_clear_fault(self, seqid, iprot, oprot):
    args = clear_fault_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clear_fault_result()
    self._handler.clear_fault(args.method)
    oprot.writeMessageBegin("clear_fault", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_fault(self, seqid, iprot, oprot):
    args = set_fault_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_fault_result()
    self._handler.set_fault(args.methods, args.random, args.err_no, args.probability, args.regexp, args.kill_caller, args.delay_us, args.auto_delay)
    oprot.writeMessageBegin("set_fault", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_set_all_fault(self, seqid, iprot, oprot):
    args = set_all_fault_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = set_all_fault_result()
    self._handler.set_all_fault(args.random, args.err_no, args.probability, args.regexp, args.kill_caller, args.delay_us, args.auto_delay)
    oprot.writeMessageBegin("set_all_fault", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class get_methods_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_methods_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class get_methods_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('get_methods_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter6 in self.success:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clear_all_faults_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clear_all_faults_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clear_all_faults_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clear_all_faults_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clear_fault_args:
  """
  Attributes:
   - method
  """

  thrift_spec = None
  def __init__(self, method=None,):
    self.method = method

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.STRING:
          self.method = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clear_fault_args')
    if self.method is not None:
      oprot.writeFieldBegin('method', TType.STRING, -1)
      oprot.writeString(self.method)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clear_fault_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clear_fault_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_fault_args:
  """
  Attributes:
   - methods
   - random
   - err_no
   - probability
   - regexp
   - kill_caller
   - delay_us
   - auto_delay
  """

  thrift_spec = None
  def __init__(self, methods=None, random=None, err_no=None, probability=None, regexp=None, kill_caller=None, delay_us=None, auto_delay=None,):
    self.methods = methods
    self.random = random
    self.err_no = err_no
    self.probability = probability
    self.regexp = regexp
    self.kill_caller = kill_caller
    self.delay_us = delay_us
    self.auto_delay = auto_delay

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.LIST:
          self.methods = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.methods.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.BOOL:
          self.random = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == -3:
        if ftype == TType.I32:
          self.err_no = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == -4:
        if ftype == TType.I32:
          self.probability = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == -5:
        if ftype == TType.STRING:
          self.regexp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == -6:
        if ftype == TType.BOOL:
          self.kill_caller = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == -7:
        if ftype == TType.I32:
          self.delay_us = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == -8:
        if ftype == TType.BOOL:
          self.auto_delay = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_fault_args')
    if self.auto_delay is not None:
      oprot.writeFieldBegin('auto_delay', TType.BOOL, -8)
      oprot.writeBool(self.auto_delay)
      oprot.writeFieldEnd()
    if self.delay_us is not None:
      oprot.writeFieldBegin('delay_us', TType.I32, -7)
      oprot.writeI32(self.delay_us)
      oprot.writeFieldEnd()
    if self.kill_caller is not None:
      oprot.writeFieldBegin('kill_caller', TType.BOOL, -6)
      oprot.writeBool(self.kill_caller)
      oprot.writeFieldEnd()
    if self.regexp is not None:
      oprot.writeFieldBegin('regexp', TType.STRING, -5)
      oprot.writeString(self.regexp)
      oprot.writeFieldEnd()
    if self.probability is not None:
      oprot.writeFieldBegin('probability', TType.I32, -4)
      oprot.writeI32(self.probability)
      oprot.writeFieldEnd()
    if self.err_no is not None:
      oprot.writeFieldBegin('err_no', TType.I32, -3)
      oprot.writeI32(self.err_no)
      oprot.writeFieldEnd()
    if self.random is not None:
      oprot.writeFieldBegin('random', TType.BOOL, -2)
      oprot.writeBool(self.random)
      oprot.writeFieldEnd()
    if self.methods is not None:
      oprot.writeFieldBegin('methods', TType.LIST, -1)
      oprot.writeListBegin(TType.STRING, len(self.methods))
      for iter13 in self.methods:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_fault_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_fault_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_all_fault_args:
  """
  Attributes:
   - random
   - err_no
   - probability
   - regexp
   - kill_caller
   - delay_us
   - auto_delay
  """

  thrift_spec = None
  def __init__(self, random=None, err_no=None, probability=None, regexp=None, kill_caller=None, delay_us=None, auto_delay=None,):
    self.random = random
    self.err_no = err_no
    self.probability = probability
    self.regexp = regexp
    self.kill_caller = kill_caller
    self.delay_us = delay_us
    self.auto_delay = auto_delay

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == -1:
        if ftype == TType.BOOL:
          self.random = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == -2:
        if ftype == TType.I32:
          self.err_no = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == -3:
        if ftype == TType.I32:
          self.probability = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == -4:
        if ftype == TType.STRING:
          self.regexp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == -5:
        if ftype == TType.BOOL:
          self.kill_caller = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == -6:
        if ftype == TType.I32:
          self.delay_us = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == -7:
        if ftype == TType.BOOL:
          self.auto_delay = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_all_fault_args')
    if self.auto_delay is not None:
      oprot.writeFieldBegin('auto_delay', TType.BOOL, -7)
      oprot.writeBool(self.auto_delay)
      oprot.writeFieldEnd()
    if self.delay_us is not None:
      oprot.writeFieldBegin('delay_us', TType.I32, -6)
      oprot.writeI32(self.delay_us)
      oprot.writeFieldEnd()
    if self.kill_caller is not None:
      oprot.writeFieldBegin('kill_caller', TType.BOOL, -5)
      oprot.writeBool(self.kill_caller)
      oprot.writeFieldEnd()
    if self.regexp is not None:
      oprot.writeFieldBegin('regexp', TType.STRING, -4)
      oprot.writeString(self.regexp)
      oprot.writeFieldEnd()
    if self.probability is not None:
      oprot.writeFieldBegin('probability', TType.I32, -3)
      oprot.writeI32(self.probability)
      oprot.writeFieldEnd()
    if self.err_no is not None:
      oprot.writeFieldBegin('err_no', TType.I32, -2)
      oprot.writeI32(self.err_no)
      oprot.writeFieldEnd()
    if self.random is not None:
      oprot.writeFieldBegin('random', TType.BOOL, -1)
      oprot.writeBool(self.random)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class set_all_fault_result:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('set_all_fault_result')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
