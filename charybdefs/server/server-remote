#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from server import server
from server.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '   get_methods()'
  print '  void clear_all_faults()'
  print '  void clear_fault(string method)'
  print '  void set_fault( methods, bool random, i32 err_no, i32 probability, string regexp, bool kill_caller, i32 delay_us, bool auto_delay)'
  print '  void set_all_fault(bool random, i32 err_no, i32 probability, string regexp, bool kill_caller, i32 delay_us, bool auto_delay)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = server.Client(protocol)
transport.open()

if cmd == 'get_methods':
  if len(args) != 0:
    print 'get_methods requires 0 args'
    sys.exit(1)
  pp.pprint(client.get_methods())

elif cmd == 'clear_all_faults':
  if len(args) != 0:
    print 'clear_all_faults requires 0 args'
    sys.exit(1)
  pp.pprint(client.clear_all_faults())

elif cmd == 'clear_fault':
  if len(args) != 1:
    print 'clear_fault requires 1 args'
    sys.exit(1)
  pp.pprint(client.clear_fault(args[0],))

elif cmd == 'set_fault':
  if len(args) != 8:
    print 'set_fault requires 8 args'
    sys.exit(1)
  pp.pprint(client.set_fault(eval(args[0]),eval(args[1]),eval(args[2]),eval(args[3]),args[4],eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'set_all_fault':
  if len(args) != 7:
    print 'set_all_fault requires 7 args'
    sys.exit(1)
  pp.pprint(client.set_all_fault(eval(args[0]),eval(args[1]),eval(args[2]),args[3],eval(args[4]),eval(args[5]),eval(args[6]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
